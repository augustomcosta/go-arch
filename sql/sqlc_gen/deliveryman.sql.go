// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: deliveryman.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createDeliveryman = `-- name: CreateDeliveryman :exec
INSERT INTO deliverymen (
                      id,
                      name,
                      age,
                      address_state,
                      address_city
)
VALUES ($1, $2, $3, $4,$5)
`

type CreateDeliverymanParams struct {
	ID           uuid.UUID
	Name         string
	Age          int32
	AddressState string
	AddressCity  string
}

func (q *Queries) CreateDeliveryman(ctx context.Context, arg CreateDeliverymanParams) error {
	_, err := q.db.ExecContext(ctx, createDeliveryman,
		arg.ID,
		arg.Name,
		arg.Age,
		arg.AddressState,
		arg.AddressCity,
	)
	return err
}

const deleteDeliveryman = `-- name: DeleteDeliveryman :exec
DELETE FROM deliverymen WHERE id = $1
`

func (q *Queries) DeleteDeliveryman(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteDeliveryman, id)
	return err
}

const getDeliveryman = `-- name: GetDeliveryman :one
SELECT id, name, age, address_state, address_city FROM deliverymen WHERE id = $1
`

func (q *Queries) GetDeliveryman(ctx context.Context, id uuid.UUID) (Deliveryman, error) {
	row := q.db.QueryRowContext(ctx, getDeliveryman, id)
	var i Deliveryman
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Age,
		&i.AddressState,
		&i.AddressCity,
	)
	return i, err
}

const getDeliverymen = `-- name: GetDeliverymen :many
SELECT id, name, age, address_state, address_city FROM deliverymen
`

func (q *Queries) GetDeliverymen(ctx context.Context) ([]Deliveryman, error) {
	rows, err := q.db.QueryContext(ctx, getDeliverymen)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Deliveryman
	for rows.Next() {
		var i Deliveryman
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Age,
			&i.AddressState,
			&i.AddressCity,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDeliveryman = `-- name: UpdateDeliveryman :exec
UPDATE deliverymen
SET
    name = $1,
    age = $2,
    address_state = $3,
    address_city = $4
WHERE id = $5
`

type UpdateDeliverymanParams struct {
	Name         string
	Age          int32
	AddressState string
	AddressCity  string
	ID           uuid.UUID
}

func (q *Queries) UpdateDeliveryman(ctx context.Context, arg UpdateDeliverymanParams) error {
	_, err := q.db.ExecContext(ctx, updateDeliveryman,
		arg.Name,
		arg.Age,
		arg.AddressState,
		arg.AddressCity,
		arg.ID,
	)
	return err
}
